/***************************************************************************
* COPYRIGHT NOTICE
* Copyright 2019 Horizon Robotics, Inc.
* All rights reserved.
***************************************************************************/
#ifndef UTILITY_SENSOR_INC_GC02M1B_SETTING_H_
#define UTILITY_SENSOR_INC_GC02M1B_SETTING_H_

#ifdef __cplusplus
extern "C" {
#endif

#define GC02M1B_VAMX		(0x07)
#define GC02M1B_HAMX		(0x0d)
#define GC02M1B_GAIN		(0xb0)
#define GC02M1B_DGAIN		(0xb1)
#define GC02M1B_X_OUTPUT_SIZE	(0x0f)
#define GC02M1B_Y_OUTPUT_SIZE	(0x0d)

#define GC02M1B_SHS1            (0x03)
#define GC02M1B_SYSCLKMHZ	(24000000)
#define S2160P			(0)
#define S1520P			(8)
#define S1080P			(16)


static uint32_t gc02m1b_page_lut[] = {
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
	0x0,
};

static uint32_t gc02m1b_again_lut[] = {
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	2,
	2,
	2,
	2,
	2,
	2,
	2,
	2,
	2,
	2,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	3,
	4,
	4,
	4,
	4,
	4,
	4,
	5,
	5,
	5,
	5,
	5,
	5,
	6,
	6,
	6,
	6,
	6,
	7,
	7,
	7,
	7,
	7,
	8,
	8,
	8,
	8,
	8,
	9,
	9,
	9,
	9,
	10,
	10,
	10,
	11,
	11,
	11,
	11,
	12,
	12,
	12,
	13,
	13,
	13,
	14,
	14,
	14,
	14,
	14,
	14,
	14,
	14,
	14,
	14,
	15,
	15,
	15,
	15,
	15,
	15,
	15,
	15,
	15,
};

static uint32_t gc02m1b_dgain_lut[] = {
	1024,
	1046,
	1069,
	1092,
	1116,
	1141,
	1166,
	1191,
	1217,
	1244,
	1271,
	1299,
	1327,
	1357,
	1386,
	1417,
	1448,
	1479,
	1512,
	1030,
	1052,
	1075,
	1099,
	1123,
	1148,
	1172,
	1198,
	1224,
	1252,
	1279,
	1307,
	1336,
	1030,
	1052,
	1075,
	1099,
	1123,
	1148,
	1173,
	1199,
	1225,
	1251,
	1033,
	1056,
	1079,
	1103,
	1127,
	1152,
	1177,
	1202,
	1229,
	1256,
	1283,
	1044,
	1067,
	1090,
	1114,
	1138,
	1163,
	1037,
	1060,
	1083,
	1107,
	1131,
	1156,
	1033,
	1056,
	1079,
	1102,
	1126,
	1039,
	1062,
	1085,
	1109,
	1133,
	1044,
	1067,
	1090,
	1114,
	1139,
	1041,
	1063,
	1087,
	1110,
	1031,
	1054,
	1077,
	1028,
	1050,
	1073,
	1097,
	1044,
	1066,
	1090,
	1045,
	1067,
	1091,
	1043,
	1066,
	1089,
	1113,
	1138,
	1162,
	1188,
	1214,
	1241,
	1268,
	1029,
	1052,
	1075,
	1098,
	1122,
	1147,
	1172,
	1198,
	1224,
};

static uint32_t gc02m1b_stream_on_setting[] = {
	//0xfe, 0x01,
	//0x8c, 0x10,
	0xfe, 0x00,
	0x3e, 0x94,
	//0x3e, 0x90,
};

static uint32_t gc02m1b_stream_off_setting[] = {
	0xfe, 0x00,
	0x3e, 0x00,
};

typedef enum GC02M1B_FPS_TYPE
{
	GC02M1B_25FPS = 25,
	GC02M1B_30FPS = 30
} SEN_FPS_TYPE_E;

static uint32_t gc02m1b_25fps_normal_setting[] = {
	//  2160p
};

static uint32_t gc02m1b_30fps_normal_setting[] = {
	//  2160p
};

static uint32_t gc02m1b_600p_raw8_normal_setting[] = {
	/*system*/
	0xfc, 0x01,
	0xf4, 0x41,
	0xf5, 0xc0,
	0xf6, 0x44,
	0xf8, 0x38,
	0xf9, 0x82,
	0xfa, 0x01,
	0xfd, 0xc0,
	0xfc, 0x81,
	0xfe, 0x03,
	0x01, 0x0b,
	0xf7, 0x11,
	0xfc, 0x80,
	0xfc, 0x80,
	0xfc, 0x80,
	0xfc, 0x8e,

	/*CISCTL*/
	0xfe, 0x00,
	0x87, 0x09,
	0xee, 0x72,
	0xfe, 0x01,
	0x8c, 0x90,
	0xfe, 0x00,
	0x90, 0x00,
	0x03, 0x02,
	0x04, 0x40,
	0x41, 0x02,
	0x42, 0x7a,
	0x05, 0x04,
	0x06, 0x48,
	0x07, 0x00,
	0x08, 0x18,
	0x9d, 0x18,
	0x09, 0x00,
	0x0a, 0x02,
	0x0d, 0x04,
	0x0e, 0xbc,
	0x17, 0x80,
	0x19, 0x04,
	0x24, 0x41,
	0x56, 0x20,
	0x5b, 0x00,
	0x5e, 0x01,

	/*analog Register width*/
	0x21, 0x1e,
	0x29, 0x20,
	0x44, 0x10,
	0x4b, 0x08,
	0x55, 0x0d,
	0xcc, 0x01,

	/*analog mode*/
	0x1a, 0x14,
	0x1f, 0x19,
	0x27, 0x30,
	0x2b, 0x00,
	0x33, 0x00,
	0x53, 0x90,
	0xe6, 0x50,

	/*analog voltage*/
	0x39, 0x07,
	0x43, 0x04,
	0x46, 0x2a,
	0x7c, 0xa0,
	0xd0, 0xbe,
	0xd1, 0x60,
	0xd2, 0x40,
	0xd3, 0xf3,
	0xde, 0x1d,

	/*analog current*/
	0xcd, 0x05,
	0xce, 0x6f,

	/*CISCTL RESET*/
	0xfc, 0x88,
	0xfe, 0x10,
	0xfe, 0x00,
	0xfc, 0x8e,
	0xfe, 0x00,
	0xfe, 0x00,
	0xfe, 0x00,
	0xfe, 0x00,
	0xfc, 0x88,
	0xfe, 0x10,
	0xfe, 0x00,
	0xfc, 0x8e,
	0xfe, 0x04,
	0xe0, 0x01,
	0xfe, 0x00,

	/*ISP*/
	0xfe, 0x01,
	0x53, 0x44,
	0x87, 0x53,
	0x89, 0x03,

	/*Gain*/
	0xfe, 0x00,
	0xb0, 0x74,
	0xb1, 0x04,
	0xb2, 0x00,
	0xb6, 0x00,
	0xfe, 0x04,
	0xd8, 0x00,

	0xc0, 0x40,  //1x
	0xc0, 0x00,
	0xc0, 0x00,
	0xc0, 0x00,
	0xc0, 0x60,  //1.5x
	0xc0, 0x00,
	0xc0, 0xc0,
	0xc0, 0x2a,
	0xc0, 0x80,  //2x
	0xc0, 0x00,
	0xc0, 0x00,
	0xc0, 0x40,
	0xc0, 0xa0,  //2.5x
	0xc0, 0x00,
	0xc0, 0x90,
	0xc0, 0x19,
	0xc0, 0xc0,  //3x
	0xc0, 0x00,
	0xc0, 0xD0,
	0xc0, 0x2F,
	0xc0, 0xe0,  //3.5x
	0xc0, 0x00,
	0xc0, 0x90,
	0xc0, 0x39,
	0xc0, 0x00,  //4x
	0xc0, 0x01,
	0xc0, 0x20,
	0xc0, 0x04,
	0xc0, 0x20,  //4.5x
	0xc0, 0x01,
	0xc0, 0xe0,
	0xc0, 0x0f,
	0xc0, 0x40,  //5x
	0xc0, 0x01,
	0xc0, 0xe0,
	0xc0, 0x1a,
	0xc0, 0x60,  //5.5x
	0xc0, 0x01,
	0xc0, 0x20,
	0xc0, 0x25,
	0xc0, 0x80,  //6x
	0xc0, 0x01,
	0xc0, 0xa0,
	0xc0, 0x2c,
	0xc0, 0xa0,  //6.5x
	0xc0, 0x01,
	0xc0, 0xe0,
	0xc0, 0x32,
	0xc0, 0xc0,  //7x
	0xc0, 0x01,
	0xc0, 0x20,
	0xc0, 0x38,
	0xc0, 0xe0,  //7.5x
	0xc0, 0x01,
	0xc0, 0x60,
	0xc0, 0x3c,
	0xc0, 0x00,  //8x
	0xc0, 0x02,
	0xc0, 0xa0,
	0xc0, 0x40,
	0xc0, 0x80,  //10x
	0xc0, 0x02,
	0xc0, 0x18,
	0xc0, 0x5c,
	0xfe, 0x00,
	0x9f, 0x10,

	/*BLK*/
	0xfe, 0x00,
	0x26, 0x20,
	0xfe, 0x01,
	0x40, 0x22,
	0x46, 0x7f,
	0x49, 0x0f,
	0x4a, 0xf0,
	0xfe, 0x04,
	0x14, 0x80,
	0x15, 0x80,
	0x16, 0x80,
	0x17, 0x80,

	/*anti_blooming*/
	0xfe, 0x01,
	0x41, 0x20,
	0x4c, 0x00,
	0x4d, 0x0c,
	0x44, 0x08,
	0x48, 0x03,

	/*Window 800X600*/
	0xfe, 0x01,
	0x90, 0x01,
	0x91, 0x00,
	0x92, 0x04,
	0x93, 0x00,
	0x94, 0x03,
	0x95, 0x02,
	0x96, 0x58,
	0x97, 0x03,
	0x98, 0x20,

	/*mipi*/
	0xfe, 0x03,
	0x01, 0x23,
	0x03, 0xce,
	0x04, 0x48,
	0x15, 0x00,
	0x21, 0x08,
	0x22, 0x03,
	0x23, 0x0e,
	0x25, 0x13,
	0x26, 0x05,
	0x29, 0x03,
	0x2a, 0x04,
	0x2b, 0x05,

	/*out*/
	0xfe, 0x01,
	0x8c, 0x10,
	0xfe, 0x00,
	0x3e, 0x00,
};

static uint32_t gc02m1b_1200p_raw10_normal_setting[] = {
	/*system*/
	0xfc, 0x01,
	0xf4, 0x41,
	0xf5, 0xc0,
	0xf6, 0x44,
	0xf8, 0x38,
	0xf9, 0x82,
	0xfa, 0x00,
	0xfd, 0x80,
	0xfc, 0x81,
	0xfe, 0x03,
	0x01, 0x0b,
	0xf7, 0x01,
	0xfc, 0x80,
	0xfc, 0x80,
	0xfc, 0x80,
	0xfc, 0x8e,

	/*CISCTL*/
	0xfe, 0x00,
	0x87, 0x09,
	0xee, 0x72,
	0xfe, 0x01,
	0x8c, 0x90,
	0xfe, 0x00,
	0x90, 0x00,
	0x03, 0x04,
	0x04, 0x7d,
	0x41, 0x04,
	0x42, 0xf4,
	0x05, 0x04,
	0x06, 0x48,
	0x07, 0x00,
	0x08, 0x18,
	0x9d, 0x18,
	0x09, 0x00,
	0x0a, 0x02,
	0x0d, 0x04,
	0x0e, 0xbc,
	0x17, 0x80,
	0x19, 0x04,
	0x24, 0x00,
	0x56, 0x20,
	0x5b, 0x00,
	0x5e, 0x01,

	/*analog Register width*/
	0x21, 0x3c,
	0x44, 0x20,
	0xcc, 0x01,

	/*analog mode*/
	0x1a, 0x04,
	0x1f, 0x11,
	0x27, 0x30,
	0x2b, 0x00,
	0x33, 0x00,
	0x53, 0x90,
	0xe6, 0x50,

	/*analog voltage*/
	0x39, 0x07,
	0x43, 0x04,
	0x46, 0x2a,
	0x7c, 0xa0,
	0xd0, 0xbe,
	0xd1, 0x60,
	0xd2, 0x40,
	0xd3, 0xf3,
	0xde, 0x1d,

	/*analog current*/
	0xcd, 0x05,
	0xce, 0x6f,

	/*CISCTL RESET*/
	0xfc, 0x88,
	0xfe, 0x10,
	0xfe, 0x00,
	0xfc, 0x8e,
	0xfe, 0x00,
	0xfe, 0x00,
	0xfe, 0x00,
	0xfe, 0x00,
	0xfc, 0x88,
	0xfe, 0x10,
	0xfe, 0x00,
	0xfc, 0x8e,
	0xfe, 0x04,
	0xe0, 0x01,
	0xfe, 0x00,

	/*ISP*/
	0xfe, 0x01,
	0x53, 0x44,
	0x87, 0x53,
	0x89, 0x03,

	/*Gain*/
	0xfe, 0x00,
	0xb0, 0x74,
	0xb1, 0x04,
	0xb2, 0x00,
	0xb6, 0x00,
	0xfe, 0x04,
	0xd8, 0x00,
	0xc0, 0x40,  //1x
	0xc0, 0x00,
	0xc0, 0x00,
	0xc0, 0x00,
	0xc0, 0x60,  //1.5x
	0xc0, 0x00,
	0xc0, 0xc0,
	0xc0, 0x2a,
	0xc0, 0x80,  //2x
	0xc0, 0x00,
	0xc0, 0x00,
	0xc0, 0x40,
	0xc0, 0xa0,  //2.5x
	0xc0, 0x00,
	0xc0, 0x90,
	0xc0, 0x19,
	0xc0, 0xc0,  //3x
	0xc0, 0x00,
	0xc0, 0xD0,
	0xc0, 0x2F,
	0xc0, 0xe0,  //3.5x
	0xc0, 0x00,
	0xc0, 0x90,
	0xc0, 0x39,
	0xc0, 0x00,  //4x
	0xc0, 0x01,
	0xc0, 0x20,
	0xc0, 0x04,
	0xc0, 0x20,  //4.5x
	0xc0, 0x01,
	0xc0, 0xe0,
	0xc0, 0x0f,
	0xc0, 0x40,  //5x
	0xc0, 0x01,
	0xc0, 0xe0,
	0xc0, 0x1a,
	0xc0, 0x60,  //5.5x
	0xc0, 0x01,
	0xc0, 0x20,
	0xc0, 0x25,
	0xc0, 0x80,  //6x
	0xc0, 0x01,
	0xc0, 0xa0,
	0xc0, 0x2c,
	0xc0, 0xa0,  //6.5x
	0xc0, 0x01,
	0xc0, 0xe0,
	0xc0, 0x32,
	0xc0, 0xc0,  //7x
	0xc0, 0x01,
	0xc0, 0x20,
	0xc0, 0x38,
	0xc0, 0xe0,  //7.5x
	0xc0, 0x01,
	0xc0, 0x60,
	0xc0, 0x3c,
	0xc0, 0x00,  //8x
	0xc0, 0x02,
	0xc0, 0xa0,
	0xc0, 0x40,
	0xc0, 0x80,  //10x
	0xc0, 0x02,
	0xc0, 0x18,
	0xc0, 0x5c,
	0xfe, 0x00,
	0x9f, 0x10,

	/*BLK*/
	0xfe, 0x00,
	0x26, 0x20,
	0xfe, 0x01,
	0x40, 0x22,
	0x46, 0x7f,
	0x49, 0x0f,
	0x4a, 0xf0,
	0xfe, 0x04,
	0x14, 0x80,
	0x15, 0x80,
	0x16, 0x80,
	0x17, 0x80,

	/*anti_blooming*/
	0xfe, 0x01,
	0x41, 0x20,
	0x4c, 0x00,
	0x4d, 0x0c,
	0x44, 0x08,
	0x48, 0x03,

	/*Window 1600X1200*/
	0xfe, 0x01,
	0x90, 0x01,
	0x91, 0x00,
	0x92, 0x06,
	0x93, 0x00,
	0x94, 0x06,
	0x95, 0x04,
	0x96, 0xb0,
	0x97, 0x06,
	0x98, 0x40,

	/*mipi*/
	0xfe, 0x03,
	0x01, 0x23,
	0x03, 0xce,
	0x04, 0x48,
	0x15, 0x00,
	0x21, 0x10,
	0x22, 0x05,
	0x23, 0x20,
	0x25, 0x20,
	0x26, 0x08,
	0x29, 0x06,
	0x2a, 0x0a,
	0x2b, 0x08,

	/*out*/
	0xfe, 0x01,
	0x8c, 0x10,
	0xfe, 0x00,
	0x3e, 0x00,
};

#ifdef __cplusplus
}
#endif

#endif  // UTILITY_SENSOR_INC_GC02M1B_SETTING_H_
